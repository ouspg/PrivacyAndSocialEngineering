/* This file was generated by the Hex-Rays decompiler version 8.0.0.220729.
   Copyright (c) 2007-2021 Hex-Rays <info@hex-rays.com>

   Detected compiler: GNU C++
*/

#include <defs.h>


//-------------------------------------------------------------------------
// Function declarations

__int64 (**init_proc())(void);
void sub_1020();
// int printf(const char *format, ...);
// int puts(const char *s);
// size_t strlen(const char *s);
// int sprintf(char *s, const char *format, ...);
// __int64 strtol(const char *nptr, char **endptr, int base);
// int strcmp(const char *s1, const char *s2);
// __int64 __isoc99_scanf(const char *, ...); weak
// __int64 __fastcall SHA1(_QWORD, _QWORD, _QWORD); weak
void __cdecl start();
char *deregister_tm_clones();
__int64 register_tm_clones();
char *_do_global_dtors_aux();
__int64 __fastcall frame_dummy(); // weak
int __cdecl main(int argc, const char **argv, const char **envp);
__int64 __fastcall sum(__int64 a1);
void term_proc();
// int __fastcall _cxa_finalize(void *);
// int __fastcall _libc_start_main(int (__fastcall *main)(int, char **, char **), int argc, char **ubp_av, void (*init)(void), void (*fini)(void), void (*rtld_fini)(void), void *stack_end);
// __int64 _gmon_start__(void); weak

//-------------------------------------------------------------------------
// Data declarations

void *_dso_handle = &_dso_handle; // idb
char edata; // weak


//----- (0000000000001000) ----------------------------------------------------
__int64 (**init_proc())(void)
{
  __int64 (**result)(void); // rax

  result = &_gmon_start__;
  if ( &_gmon_start__ )
    return (__int64 (**)(void))_gmon_start__();
  return result;
}
// 40C0: using guessed type __int64 _gmon_start__(void);

//----- (0000000000001020) ----------------------------------------------------
void sub_1020()
{
  JUMPOUT(0LL);
}
// 1026: control flows out of bounds to 0

//----- (00000000000010C0) ----------------------------------------------------
// positive sp value has been detected, the output may be wrong!
void __cdecl __noreturn start()
{
  __int64 v0; // rax
  void (*v1)(void); // rdx
  int v2; // esi
  __int64 v3; // [rsp-8h] [rbp-8h] BYREF
  char *retaddr; // [rsp+0h] [rbp+0h] BYREF

  v2 = v3;
  v3 = v0;
  _libc_start_main((int (__fastcall *)(int, char **, char **))main, v2, &retaddr, 0LL, 0LL, v1, &v3);
  __halt();
}
// 10CA: positive sp value 8 has been found
// 10D1: variable 'v0' is possibly undefined
// 10DF: variable 'v1' is possibly undefined

//----- (00000000000010F0) ----------------------------------------------------
char *deregister_tm_clones()
{
  return &edata;
}
// 4058: using guessed type char edata;

//----- (0000000000001120) ----------------------------------------------------
__int64 register_tm_clones()
{
  return 0LL;
}

//----- (0000000000001160) ----------------------------------------------------
char *_do_global_dtors_aux()
{
  char *result; // rax

  if ( !edata )
  {
    if ( &_cxa_finalize )
      _cxa_finalize(_dso_handle);
    result = deregister_tm_clones();
    edata = 1;
  }
  return result;
}
// 4058: using guessed type char edata;

//----- (00000000000011B0) ----------------------------------------------------
__int64 frame_dummy()
{
  return register_tm_clones();
}
// 11B0: using guessed type __int64 __fastcall frame_dummy();

//----- (00000000000011B9) ----------------------------------------------------
int __cdecl main(int argc, const char **argv, const char **envp)
{
  int i; // [rsp+4h] [rbp-12Ch]
  char *endptr; // [rsp+8h] [rbp-128h] BYREF
  __int64 v6; // [rsp+10h] [rbp-120h]
  __int64 v7; // [rsp+18h] [rbp-118h]
  __int64 v8; // [rsp+20h] [rbp-110h]
  size_t v9; // [rsp+28h] [rbp-108h]
  char s2[32]; // [rsp+30h] [rbp-100h] BYREF
  char s1[32]; // [rsp+50h] [rbp-E0h] BYREF
  char s[32]; // [rsp+70h] [rbp-C0h] BYREF
  char nptr[32]; // [rsp+90h] [rbp-A0h] BYREF
  char v14[32]; // [rsp+B0h] [rbp-80h] BYREF
  char v15[48]; // [rsp+D0h] [rbp-60h] BYREF
  char v16[40]; // [rsp+100h] [rbp-30h] BYREF
  unsigned __int64 v17; // [rsp+128h] [rbp-8h]

  v17 = __readfsqword(0x28u);
  strcpy(s2, "Vulture35Vulture");
  v6 = 0LL;
  while ( 1 )
  {
    printf("Enter secret passwd: ");
    __isoc99_scanf("%s", s1);
    if ( !strcmp(s1, s2) )
      break;
    puts("Password incorrect ");
  }
  puts("Password correct ");
  while ( 1 )
  {
    printf("Enter Activation Key: ");
    __isoc99_scanf("%s", nptr);
    v7 = strtol(nptr, &endptr, 10);
    v8 = v7;
    v6 = sum(v7);
    if ( v7 > 59347700 && v7 <= 59347970 && v6 == 44 )
      break;
    puts("Invalid Activation Key ");
  }
  puts("Valid Activation Key ");
  qmemcpy(v16, "4dc9332ca3bbc59c880fd2cbe7ec1b7ca171cc82", sizeof(v16));
  while ( 1 )
  {
    printf("Enter Super secret password: ");
    __isoc99_scanf("%s", s);
    v9 = strlen(s);
    SHA1(s, v9, v14);
    for ( i = 0; i <= 19; ++i )
      sprintf(&v15[2 * i], "%02x", (unsigned __int8)v14[i]);
    if ( !strcmp(v15, v16) )
      break;
    puts("Password incorrect ");
  }
  puts("Password correct ");
  return 0;
}
// 10A0: using guessed type __int64 __isoc99_scanf(const char *, ...);
// 10B0: using guessed type __int64 __fastcall SHA1(_QWORD, _QWORD, _QWORD);
// 11B9: using guessed type char var_80[32];
// 11B9: using guessed type char var_60[48];

//----- (00000000000014A1) ----------------------------------------------------
__int64 __fastcall sum(__int64 a1)
{
  __int64 v3; // [rsp+10h] [rbp-8h]

  v3 = 0LL;
  while ( a1 )
  {
    v3 += a1 % 10;
    a1 /= 10LL;
  }
  return v3;
}

//----- (0000000000001524) ----------------------------------------------------
void term_proc()
{
  ;
}

// nfuncs=31 queued=10 decompiled=10 lumina nreq=0 worse=0 better=0
// ALL OK, 10 function(s) have been successfully decompiled